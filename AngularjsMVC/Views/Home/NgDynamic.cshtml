@*<script type="text/javascript">*@
    angular.module("NgDynamic", [])
    .constant("autoCompleteCount", 5)
    .constant("defaultPageCount", 50)
    .constant("baseUrl", "@Url.Content("/")")
    .constant("contentUrl", "@Url.Content("/Content/")")
    .value("countdownArgs", {
        logoutUrl: "@Url.Action("Logout", "Login")",
        keepAliveUrl: "@Url.Action("KeepAlive", "Login")",
        sessionTimeout: @Session.Timeout,
        timeoutCountdown: @System.Web.Configuration.WebConfigurationManager.AppSettings["TimeoutCountDown"]
    })
    .config(["$routeProvider", "baseUrl", function ($routeProvider, baseUrl) {
    $routeProvider
        .when("/", {
        templateUrl : '@Url.Content("/Content/base/html/Keyframe.html")'})
        .when("/CustomDirectiveDemo", {
        templateUrl : baseUrl+"Test/CustomDirectiveDemo"})
        .when("/FormValidation", {
        templateUrl : baseUrl+"Test/FormValidation"});

    }])
    .factory("formater", function () {
        return {
            formatString: function (source) {
                return function (params) {
                    var result = source;
                    angular.forEach(params, function (param, i) {
                        result = result.replace(new RegExp("\\{" + i + "\\}", "g"), param);
                    });
                    return result;
                };
            }
        }
    })
    .factory("message", ["formater", function (formater) {
        return {
            defaults: {
                deleteConfirm: " will delete <br/>please confirm?",
                noitem: "nodata",
                loadingMsg: "loading...",
                dataLocked: formater.formatString("data locked")
            },
            validate: {
                required: "please input data",
                email: "Email format error",
                url: "url format error",
                date: "date format error",
                time: "time format error",
                dataLessThan: "enddate not less startdate",
                ipv4: "IP format error",
                integer: "integer format error",
                number: "number format error",
                digit: "only allow digit",
                equalTo: "data no match",
                alphaNumeric: "only letter or num",
                lessThan: formater.formatString("end {0} not less start {0}"),
                float: formater.formatString("float format error {0}"),
                maxlength: formater.formatString("data length not more {0} char"),
                minlength: formater.formatString("data length at least {0} char"),
                rangelength: formater.formatString("data length need between {0} to {1} char"),
                range: formater.formatString("range need between {0} to {1} "),
                max: formater.formatString("not exceed {0}"),
                min: formater.formatString("not Less than {0}"),
                dateRange: formater.formatString("date exceed allowable range({0}~{1})"),
                TaxKindNotFound: "not found format",
                fixlength: formater.formatString("data length need {0} char"),
            },
            getValidateMsg: function (field, element) {
                var self = this;
                var msg = [];
                var form,
                    inputField;


                var getParams = function () {
                    var error = field.$error;
                    var params = [];

                    form = findForm(element);
                    inputField = findChildByName(form, field.$name);

                    if (error.maxlength) { params = getMaxLengthParams(); }
                    if (error.minlength) { params = getMinLengthParams(); }
                    if (error.rangelength) { params = getRangeLengthParams(); }
                    if (error.range) { params = getRangeParams(); }
                    if (error.max) { params = getMaxParams(); }
                    if (error.min) { params = getMinParams(); }
                    if (error.float) { params = getFloatParams(); }
                    if (error.dateRange) { params = getDateRangeParams(); }
                    if (error.fixlength) { params = getFixLengthParams(); }
                    if (error.lessThan) { params = getLessThenParams(); }

                    return params;
                }

                var getMaxLengthParams = function () {
                    return [].push(inputField.attr("maxlength"));
                }

                var getMinLengthParams = function () {
                    var params = [];
                    params.push(inputField.attr("minlength"));
                    return params;
                }

                var getRangeLengthParams = function () {
                    return inputField.attr("rangelength").split(",");
                }

                var getRangeParams = function () {
                    return [];
                }

                var getMaxParams = function () {
                    return [];
                }

                var getMinParams = function () {
                    return [];
                }

                var getFloatParams = function() {
                    var params = [];
                    if (isNaN(inputField.attr("float"))) {
                        params.push("");
                    } else {
                        var errorMessage = "，The maximum is ";

                        if (inputField.attr("float-length")) {
                            errorMessage += parseInt(inputField.attr("float-length")) - parseInt(inputField.attr("float")) + "interger point";
                        }
                        
                        errorMessage += inputField.attr("float") + " decimal point";
                        params.push(errorMessage);
                    }
                    return params;
                }

                var getDateRangeParams = function() {
                    var params = [];
                    var minDate = inputField.attr("min-date") || "";
                    var maxDate = inputField.attr("max-date") || "";

                    params.push(minDate);
                    params.push(maxDate);

                    return params;
                }

                var getFixLengthParams = function () {
                    var params = [];
                    params.push(inputField.attr("fixlength"));
                    return params;
                }

                var getLessThenParams = function(){
                    var params = [];
                    var name = inputField.attr("value-text") || "value";
                    params.push(name);
                    return params;
                }

                var findForm = function (element) {
                    return element.parents("form:first");
                }

                var findChildByName = function (element, name) {
                    return element.find("[name='" + name + "']");
                }

                var getErrMsg = function () {
                    var errMsg = "";

                    if ($.isFunction(self.validate[prop])) {
                        var args = [];

                        args.push(getParams());
                        errMsg = self.validate[prop].apply(self, args);
                    } else {
                        errMsg = self.validate[prop];
                    }

                    return errMsg;
                }


                if (field.$error.required) {
                    msg.push(self.validate.required);
                } else {
                    for (var prop in field.$error) {
                        if (prop != "required") {
                            msg.push(getErrMsg());
                        }
                    };
                }

                return msg;
            },
            getTextLength: function (textLength) {
                return "already input(" + textLength + ") char";
            }
        };
    }]);
@*</script>*@